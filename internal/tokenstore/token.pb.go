// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/tokenstore/token.proto

/*
Package tokenstore is a generated protocol buffer package.

It is generated from these files:
	internal/tokenstore/token.proto

It has these top-level messages:
	TokenRequest
	Token
*/
package tokenstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenRequest struct {
	CharacterID      int32 `protobuf:"varint,1,opt,name=characterID" json:"characterID,omitempty"`
	TokenCharacterID int32 `protobuf:"varint,2,opt,name=tokenCharacterID" json:"tokenCharacterID,omitempty"`
}

func (m *TokenRequest) Reset()                    { *m = TokenRequest{} }
func (m *TokenRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()               {}
func (*TokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TokenRequest) GetCharacterID() int32 {
	if m != nil {
		return m.CharacterID
	}
	return 0
}

func (m *TokenRequest) GetTokenCharacterID() int32 {
	if m != nil {
		return m.TokenCharacterID
	}
	return 0
}

type Token struct {
	TokenType    string                     `protobuf:"bytes,1,opt,name=tokenType" json:"tokenType,omitempty"`
	AccessToken  string                     `protobuf:"bytes,2,opt,name=accessToken" json:"accessToken,omitempty"`
	RefreshToken string                     `protobuf:"bytes,3,opt,name=refreshToken" json:"refreshToken,omitempty"`
	Expiry       *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=Expiry" json:"Expiry,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Token) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *Token) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *Token) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *Token) GetExpiry() *google_protobuf.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func init() {
	proto.RegisterType((*TokenRequest)(nil), "tokenstore.TokenRequest")
	proto.RegisterType((*Token)(nil), "tokenstore.Token")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TokenStore service

type TokenStoreClient interface {
	// Sends a greeting
	GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error)
}

type tokenStoreClient struct {
	cc *grpc.ClientConn
}

func NewTokenStoreClient(cc *grpc.ClientConn) TokenStoreClient {
	return &tokenStoreClient{cc}
}

func (c *tokenStoreClient) GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/tokenstore.TokenStore/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TokenStore service

type TokenStoreServer interface {
	// Sends a greeting
	GetToken(context.Context, *TokenRequest) (*Token, error)
}

func RegisterTokenStoreServer(s *grpc.Server, srv TokenStoreServer) {
	s.RegisterService(&_TokenStore_serviceDesc, srv)
}

func _TokenStore_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenstore.TokenStore/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServer).GetToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenstore.TokenStore",
	HandlerType: (*TokenStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _TokenStore_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/tokenstore/token.proto",
}

func init() { proto.RegisterFile("internal/tokenstore/token.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x09, 0xd0, 0x8a, 0x5c, 0x3b, 0x80, 0xa7, 0x28, 0x42, 0x6a, 0x94, 0xa9, 0x62, 0x70,
	0xa4, 0x30, 0x31, 0x03, 0xaa, 0x58, 0x4d, 0x46, 0x16, 0x37, 0xba, 0xb6, 0x11, 0x6d, 0x1c, 0xec,
	0xab, 0x44, 0x9f, 0x86, 0x57, 0x45, 0x39, 0x53, 0xc5, 0x28, 0x9b, 0xf5, 0xdd, 0xe7, 0xff, 0x74,
	0x3f, 0x2c, 0x9a, 0x96, 0xd0, 0xb6, 0x7a, 0x5f, 0x90, 0xf9, 0xc4, 0xd6, 0x91, 0xb1, 0xe8, 0x9f,
	0xb2, 0xb3, 0x86, 0x8c, 0x80, 0x81, 0xa7, 0x8b, 0xad, 0x31, 0xdb, 0x3d, 0x16, 0x3c, 0x59, 0x1f,
	0x37, 0x05, 0x35, 0x07, 0x74, 0xa4, 0x0f, 0x9d, 0x97, 0xf3, 0x0f, 0x98, 0x57, 0xbd, 0xae, 0xf0,
	0xeb, 0x88, 0x8e, 0x44, 0x06, 0xb3, 0x7a, 0xa7, 0xad, 0xae, 0x09, 0xed, 0xdb, 0x4b, 0x12, 0x65,
	0xd1, 0x72, 0xa2, 0x42, 0x24, 0x1e, 0xe0, 0x96, 0x17, 0x3c, 0x07, 0xda, 0x25, 0x6b, 0x23, 0x9e,
	0xff, 0x44, 0x30, 0xe1, 0x78, 0x71, 0x0f, 0x31, 0x4f, 0xab, 0x53, 0x87, 0x9c, 0x1a, 0xab, 0x01,
	0xf4, 0x5b, 0x75, 0x5d, 0xa3, 0x73, 0x2c, 0x73, 0x5c, 0xac, 0x42, 0x24, 0x72, 0x98, 0x5b, 0xdc,
	0x58, 0x74, 0x3b, 0xaf, 0x5c, 0xb1, 0xf2, 0x8f, 0x89, 0x12, 0xa6, 0xaf, 0xdf, 0x5d, 0x63, 0x4f,
	0xc9, 0x75, 0x16, 0x2d, 0x67, 0x65, 0x2a, 0xfd, 0xf5, 0xf2, 0x7c, 0xbd, 0xac, 0xce, 0xd7, 0xab,
	0x3f, 0xb3, 0x5c, 0x01, 0xf0, 0xe7, 0xf7, 0xbe, 0x2e, 0xf1, 0x04, 0x37, 0x2b, 0x24, 0x9f, 0x96,
	0xc8, 0xa1, 0x47, 0x19, 0x76, 0x94, 0xde, 0x8d, 0x26, 0xf9, 0xc5, 0x7a, 0xca, 0x4b, 0x1e, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x12, 0xea, 0x95, 0xea, 0x9f, 0x01, 0x00, 0x00,
}
